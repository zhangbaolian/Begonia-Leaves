
#####################################################
###
###	Adventurer AI Contract Story Cycle On-Actions
###
### on_adventurer_ai_new_kingdom_arrival
### on_adventurer_ai_new_employer_arrival
### on_adventurer_ai_war_target_arrival
###
#####################################################

on_adventurer_ai_new_kingdom_arrival = {
	trigger = { ep3_adventurer_ai_logic_valid_trigger = yes }
	effect = {
		every_character_task_contract = { # Purge all contracts the AI left behind
			limit = {
				"task_contract_location.squared_distance(root.location)" > define:NTaskContract|ADVENTURER_DISTANCE_RESTRICTION
				save_temporary_scope_as = temp_contract
				root = {
					NOT = {
						any_character_active_contract = { this = scope:temp_contract }
					}
				}
			}
			invalidate_contract = yes
		}
	}
}

on_adventurer_ai_new_employer_arrival = {
	trigger = { ep3_adventurer_ai_logic_valid_trigger = yes }
	effect = {}
}

on_adventurer_ai_war_target_arrival = {
	trigger = { ep3_adventurer_ai_logic_valid_trigger = yes }
	effect = {
		random_owned_story = {
			limit = { story_type = story_adventurer_ai }
			save_scope_as = story
		}
		scope:story.var:war_target_realm.holder ?= { save_scope_as = war_target }
		if = {
			limit = {
				scope:story.var:war_target_attempts <= 3
				scope:war_target ?= {
					ep3_adventurer_ai_valid_war_target_trigger = { ADVENTURER = scope:story.story_owner }
				}
			}
			scope:story = {
				change_variable = {
					name = war_target_attempts
					add = 1
				}
			}
			if = { # Adventurer declares war on target, if possible
				limit = {
					scope:story.story_owner.domicile.domicile_location.county ?= {
						NOT = { holder.top_liege ?= scope:war_target } # Not already within target realm...
						any_neighboring_county = { holder.top_liege ?= scope:war_target } # ...or on border
					}
				}
				ep3_adventurer_ai_war_declare_effect = {
					ADVENTURER = scope:story.story_owner
					WAR_TARGET = scope:war_target
				}
			}
			else = { # Move to the war target, if necessary
				ep3_adventurer_ai_war_travel_effect = {
					ADVENTURER = scope:story.story_owner
					WAR_TARGET = scope:war_target
				}
			}
		}
		else = {
			scope:story = {
				remove_variable = war_target_realm
				remove_variable = war_target_attempts
				set_variable = {
					name = war_target_cooldown
					years = 1
				}
			}
		}
	}
}
